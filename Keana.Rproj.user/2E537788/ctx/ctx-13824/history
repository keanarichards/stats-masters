}
## renaming other columns
raw <- raw %>% rename(
c(Q286 = "age", Q288="educ", Q290= "race",
Q290_7_TEXT = "race_other", Q292 = "sex",
Q294_1 = "residence", Q294_4_TEXT = "residence_other",
Q296_1 = "pol_ideology", Q298="pol_party",
Q298_4_TEXT= "pol_party_other", Q32 = "suspicion",
Q32_4_TEXT = "suspicion_other", Q93= "mc_name",
Q82 = "mc_race_w", Q84 = "mc_race_b", Q236 = "feedback",
Q93_DO = "mc_name_do", Q54_DO = "b_race_name_do",
Q55_DO = "w_race_name_do", FL_3_DO = "cond_do",
FL_153_DO = "name1", FL_154_DO = "voice1",
FL_191_DO = "name2", FL_201_DO = "voice2",
FL_219_DO = "name3", FL_232_DO = "voice3",
FL_316_DO = "name4", FL_257_DO = "voice4",
MCrace_DO = "mc_race_q_do", MCrace2_DO = "race_name_q_do",
headphones_speakers_3_TEXT = "headphones_speakers_other",
Score = "mc_name_score")
)
names(raw) <- gsub("Q54", "b_race_name", names(raw))
names(raw) <- gsub("Q55", "w_race_name", names(raw))
# merging repeated columns to remove NAs ---------------------------------------------------------
names(raw) <- make.unique(names(raw))
for(i in names(y)) {
raw[,i] <- raw %>% unite(i, names(raw[grep(i, names(raw))])
, remove = T, na.rm = T) %>% select(i)
}
## removing extra columns
raw <- raw %>% select(-c(idvoice.1:thoughts.31))
## separating repeated measures
for(i in names(y)) {
raw[,paste0(i, 1:4)] <- raw %>% separate(i, paste0(i, 1:4),
sep = "_", remove = T, extra = "drop") %>% select(paste0(i, 1:4))
}
## removing extra columns
raw <- raw %>% select(-names(y))
# export names and descriptions -----------------------------------------------------------
## storing in DF called col_names_des
col_names <-names(x = raw)
des <-unlist(raw[1,], use.names = F)
col_names_des <- data.frame(cbind(col_names, des))
col_names_des <- col_names_des %>% add_row(col_names = c("leadership1", "leadership2", "leadership3", "leadership4"),
des =c("leadership composite for condition with Black name and high pitched voice",
"leadership composite for condition with Black name and low pitched voice",
"leadership composite for condition with White name and high pitched voice",
"leadership composite for condition with White name and low pitched voice"))
write.csv(col_names_des, here("data", "vars-and-labels.csv"), row.names = F)
## removing extra row (description from qualtrics)
raw <- raw[-1, ]
# converting vars to numeric  ----------------------------------------------
raw <- raw %>% retype()
# recoding display order vars --------------------------------------------
raw$name1 <- recode(raw$name1, FL_171 = "Deshawn", FL_172 = "Tyrone", FL_182 = "Terrell", FL_183 = "Keyshawn")
raw$voice1 <- recode(raw$voice1, FL_155 = "a", FL_156 = "b", FL_157 = "c", FL_158 = "d",
FL_159 = "e", FL_160 = "f", FL_161 = "g", FL_162 = "h"
)
raw$name2 <- recode(raw$name2, FL_193 = "Deshawn", FL_195 = "Tyrone", FL_197 = "Terrell", FL_199 = "Keyshawn")
raw$voice2 <- recode(raw$voice2, FL_202 = "a", FL_204 = "b", FL_205 = "c", FL_206 = "d",
FL_207 = "e", FL_208 = "f", FL_209 = "g", FL_210 = "h")
raw$name3 <- recode(raw$name3, FL_220 = "Scott", FL_221 = "Brad", FL_222= "Logan", FL_223 = "Brett")
raw$voice3 <- recode(raw$voice3, FL_233 = "a", FL_236 = "b", FL_238 = "c", FL_240 = "d",
FL_242 = "e", FL_244 = "f", FL_246 = "g", FL_248 = "h")
raw$name4 <- recode(raw$name4, FL_317 = "Scott", FL_319 = "Brad", FL_321 = "Logan", FL_323 = "Brett")
raw$voice4 <- recode(raw$voice4, FL_258 = "a", FL_259 = "b", FL_260 = "c", FL_261 = "d",
FL_262 = "e", FL_263 = "f", FL_264 = "g", FL_265 = "h")
# composite leadership --------------------------------------------------------------
## selecting relevant columns
s <- grep("^intell|^comm|^prob|^conf", names(raw))
## have to repeat for each condition
for (i in seq(1:4)) {
raw <-raw %>% mutate(!!paste0("leadership",i):=rowMeans(raw[seq(from = s[i], to = s[16], by= 4)], na.rm = T))
}
View(raw)
raw[, "id"] <- seq(1, nrow(raw))
setnames(raw, old = raw %>% select(idvoice1:conf4, team1:boss4, leadership1:leadership4, name1:voice4) %>% names(), new = snakecase::to_any_case(raw %>% select(idvoice1:conf4, team1:boss4, leadership1:leadership4, name1:voice4) %>% names())
)
long <- raw %>% gather(Column, Value, idvoice_1:conf_4, team_1:boss_4, leadership_1:leadership_4, name_1:voice_4) %>%
separate(Column, into = c("Column", "condition"), sep = "_") %>%
spread(Column, Value)
long$condition <-  recode(long$condition, "1" = "BH", "2" = "BL", "3"= "WH", "4" = "WL")
long$race
long$race
separate(condition, c("cond_race", "cond_pitch"))
long %>% separate(condition, c("cond_race", "cond_pitch"))
long %>% strsplit(condition , "")
long %>% strsplit("condition", "")
strsplit(long$condition, "")
long[, c("cond_race", "cond_pitch")]strsplit(long$condition, "")
long[c("cond_race", "cond_pitch")]strsplit(long$condition, "")
long[c("cond_race", "cond_pitch")] <- strsplit(long$condition, "")
long[,c("cond_race", "cond_pitch")] <- strsplit(long$condition, "")
do.call(rbind, strsplit(long$condition, ""))
cbind(long$condition, strsplit(long$condition, ""))
strsplit(long$condition, "")
x <- strsplit(long$condition, "")
cbind(long, x)
x <- do.call(rbind, strsplit(long$condition, ""))
cbind(long, x)
long %>% rename(1 = "cond_race", 2 = "cond_pitch")
long %>% rename(c(1 = "cond_race", 2 = "cond_pitch"))
long %>% rename(c(`1` = "cond_race", `2`= "cond_pitch"))
long <- long %>% rename(c(`1` = "cond_race", `2`= "cond_pitch"))
names(long)
# load packages -----------------------------------------------------------
## Package names
packages <- c("tidyverse", "reshape", "hablar", "here", "snakecase", "data.table")
## Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
## Packages loading
invisible(lapply(packages, library, character.only = TRUE))
# load data ---------------------------------------------------------------
## note: downloaded from Qualtrics, made sure to export viewing order for randomized questions
raw <- read_csv(here("data", "raw.csv"))
# removing extra columns and row 2 --------------------------------------------------
raw <- raw %>% slice(-2) %>% select(-c(StartDate:UserLanguage, SC0, Condition))
# renaming columns --------------------------------------------------------
## first have to create sequences of numbers to use for identifying repeated measures
## creating empty data frame for entering sequences
y <- data.frame(
matrix(ncol=16,nrow=32,
dimnames=list(NULL, c("idvoice", "trust", "dom", "threat",
"intell", "comm", "prob", "conf", "trait_do", "team", "frnd",
"neighbr", "employee", "boss", "role_do", "thoughts")))
)
## changing "to" argument for cols 15 and 16 for code to work
y[15] <- seq(from= 17, to = 513, by = 16)
y[16] <- seq(from= 18, to = 514, by = 16)
seq_length <- seq(from = 1, to= 14)
for(i in seq_length) {
y[i] = seq(2+ i, to = 16*32, by = 16)
}
## renaming repeated measures
for(i in names(y)){
names(raw)[y[, i]] <- i
}
## renaming other columns
raw <- raw %>% rename(
c(Q286 = "age", Q288="educ", Q290= "race",
Q290_7_TEXT = "race_other", Q292 = "sex",
Q294_1 = "residence", Q294_4_TEXT = "residence_other",
Q296_1 = "pol_ideology", Q298="pol_party",
Q298_4_TEXT= "pol_party_other", Q32 = "suspicion",
Q32_4_TEXT = "suspicion_other", Q93= "mc_name",
Q82 = "mc_race_w", Q84 = "mc_race_b", Q236 = "feedback",
Q93_DO = "mc_name_do", Q54_DO = "b_race_name_do",
Q55_DO = "w_race_name_do", FL_3_DO = "cond_do",
FL_153_DO = "name1", FL_154_DO = "voice1",
FL_191_DO = "name2", FL_201_DO = "voice2",
FL_219_DO = "name3", FL_232_DO = "voice3",
FL_316_DO = "name4", FL_257_DO = "voice4",
MCrace_DO = "mc_race_q_do", MCrace2_DO = "race_name_q_do",
headphones_speakers_3_TEXT = "headphones_speakers_other",
Score = "mc_name_score")
)
names(raw) <- gsub("Q54", "b_race_name", names(raw))
names(raw) <- gsub("Q55", "w_race_name", names(raw))
# merging repeated columns to remove NAs ---------------------------------------------------------
names(raw) <- make.unique(names(raw))
for(i in names(y)) {
raw[,i] <- raw %>% unite(i, names(raw[grep(i, names(raw))])
, remove = T, na.rm = T) %>% select(i)
}
## removing extra columns
raw <- raw %>% select(-c(idvoice.1:thoughts.31))
## separating repeated measures
for(i in names(y)) {
raw[,paste0(i, 1:4)] <- raw %>% separate(i, paste0(i, 1:4),
sep = "_", remove = T, extra = "drop") %>% select(paste0(i, 1:4))
}
## removing extra columns
raw <- raw %>% select(-names(y))
# export names and descriptions -----------------------------------------------------------
## storing in DF called col_names_des
col_names <-names(x = raw)
des <-unlist(raw[1,], use.names = F)
col_names_des <- data.frame(cbind(col_names, des))
col_names_des <- col_names_des %>% add_row(col_names = c("leadership1", "leadership2", "leadership3", "leadership4"),
des =c("leadership composite for condition with Black name and high pitched voice",
"leadership composite for condition with Black name and low pitched voice",
"leadership composite for condition with White name and high pitched voice",
"leadership composite for condition with White name and low pitched voice"))
write.csv(col_names_des, here("data", "vars-and-labels.csv"), row.names = F)
## removing extra row (description from qualtrics)
raw <- raw[-1, ]
# converting vars to numeric  ----------------------------------------------
raw <- raw %>% retype()
# recoding display order vars --------------------------------------------
raw$name1 <- recode(raw$name1, FL_171 = "Deshawn", FL_172 = "Tyrone", FL_182 = "Terrell", FL_183 = "Keyshawn")
raw$voice1 <- recode(raw$voice1, FL_155 = "a", FL_156 = "b", FL_157 = "c", FL_158 = "d",
FL_159 = "e", FL_160 = "f", FL_161 = "g", FL_162 = "h"
)
raw$name2 <- recode(raw$name2, FL_193 = "Deshawn", FL_195 = "Tyrone", FL_197 = "Terrell", FL_199 = "Keyshawn")
raw$voice2 <- recode(raw$voice2, FL_202 = "a", FL_204 = "b", FL_205 = "c", FL_206 = "d",
FL_207 = "e", FL_208 = "f", FL_209 = "g", FL_210 = "h")
raw$name3 <- recode(raw$name3, FL_220 = "Scott", FL_221 = "Brad", FL_222= "Logan", FL_223 = "Brett")
raw$voice3 <- recode(raw$voice3, FL_233 = "a", FL_236 = "b", FL_238 = "c", FL_240 = "d",
FL_242 = "e", FL_244 = "f", FL_246 = "g", FL_248 = "h")
raw$name4 <- recode(raw$name4, FL_317 = "Scott", FL_319 = "Brad", FL_321 = "Logan", FL_323 = "Brett")
raw$voice4 <- recode(raw$voice4, FL_258 = "a", FL_259 = "b", FL_260 = "c", FL_261 = "d",
FL_262 = "e", FL_263 = "f", FL_264 = "g", FL_265 = "h")
# composite leadership --------------------------------------------------------------
## selecting relevant columns
s <- grep("^intell|^comm|^prob|^conf", names(raw))
## have to repeat for each condition
for (i in seq(1:4)) {
raw <-raw %>% mutate(!!paste0("leadership",i):=rowMeans(raw[seq(from = s[i], to = s[16], by= 4)], na.rm = T))
}
# long format -------------------------------------------------------------
raw[, "id"] <- seq(1, nrow(raw))
setnames(raw, old = raw %>% select(idvoice1:conf4, team1:boss4, leadership1:leadership4, name1:voice4) %>% names(), new = snakecase::to_any_case(raw %>% select(idvoice1:conf4, team1:boss4, leadership1:leadership4, name1:voice4) %>% names())
)
long <- raw %>% gather(Column, Value, idvoice_1:conf_4, team_1:boss_4, leadership_1:leadership_4, name_1:voice_4) %>%
separate(Column, into = c("Column", "condition"), sep = "_") %>%
spread(Column, Value)
long$condition <-  recode(long$condition, "1" = "BH", "2" = "BL", "3"= "WH", "4" = "WL")
## separating race and voice pitch variables to test & plot interaction effects
x <- do.call(rbind, strsplit(long$condition, ""))
long <- cbind(long, x)
names(long)
long <- long %>% rename(c("1" = "cond_race", "2"= "cond_pitch"))
names(long)
nullmodel3 <- lmer( threat ~ condition + voice + (race/name|id), data = long, REML=FALSE)
# load packages -----------------------------------------------------------
## Package names
packages <- c("here", "tidyverse", "lme4")
## Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
## Packages loading
invisible(lapply(packages, library, character.only = TRUE))
# load data ---------------------------------------------------------------
##pages 912 library book: Discovering statistics using R andy field
long <- read_csv(here("data", "long.csv"))
nullmodel3 <- lmer( threat ~ condition + voice + (race/name|id), data = long, REML=FALSE)
nullmodel3 <- lmer( threat ~ condition + voice + (race|id), data = long, REML=FALSE)
nullmodel2 <- lmer( threat~ condition + voice +(1|id), data = long, REML=FALSE)
nullmodel3 <- lmer( threat ~ condition + voice + (cond_race/name|id), data = long, REML=FALSE)
nullmodel3 <- lmer( threat ~ condition + voice + (cond_race|id), data = long, REML=FALSE)
nullmodel3 <- lmer( threat ~ condition + voice + (cond_race+cond_pitch|id), data = long, REML=FALSE)
nullmodel3 <- lmer( threat ~ condition + voice + (cond_race*cond_pitch|id), data = long, REML=FALSE)
nullmodel3 <- lmer( threat ~ cond_race*cond_pitch + voice + (cond_race*cond_pitch|id), data = long, REML=FALSE)
nullmodel3 <- lmer( threat ~ cond_race*cond_pitch + voice + (cond_race:cond_pitch|id), data = long, REML=FALSE)
nullmodel3 <- lmer( threat ~ cond_race*cond_pitch + voice + (cond_race+cond_pitch|id), data = long, REML=FALSE)
nullmodel3 <- lmer( threat ~ cond_race*cond_pitch + voice + (cond_race|id) + (cond_pitch|id), data = long, REML=FALSE)
nullmodel3 <- lmer( threat ~ cond_race*cond_pitch + voice + (1 + cond_race*cond_pitch|id), data = long, REML=FALSE)
nullmodel3 <- lmer( threat ~ cond_race*cond_pitch + voice + (1 + cond_race*cond_pitch||id), data = long, REML=FALSE)
View(long)
nullmodel3 <- lmer( threat ~ cond_race*cond_pitch + voice + (condition||id), data = long, REML=FALSE)
nullmodel3 <- lmer( threat ~ condition + voice + (condition||id), data = long, REML=FALSE)
nullmodel3 <- lmer( threat ~ condition + voice + (condition|id), data = long, REML=FALSE)
nullmodel3 <- lmer( threat ~ condition + voice + (1+ condition|id), data = long, REML=FALSE)
load("C:/Users/keana/Downloads/starling (1).RData")
View(dataf)
lmer(threat~condition + (1|condition/name), data = long)
lmer(threat~condition + (1|subject/name), data = long)
lmer(threat~condition + (1|id/name), data = long)
lmer(threat~condition + (1|id), data = long)
lmer(threat~condition + (condition|id), data = long)
# load packages -----------------------------------------------------------
## Package names
packages <- c("here", "tidyverse", "lme4")
## Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
## Packages loading
invisible(lapply(packages, library, character.only = TRUE))
# load data ---------------------------------------------------------------
##pages 912 library book: Discovering statistics using R andy field
long <- read_csv(here("data", "long.csv"))
lmer(threat~condition + (condition|id), data = long)
lmer(threat~condition + (1|id), data = long)
lmer(threat~condition + (1|id) + (1|name), data = long)
lmer(threat~condition + (1|id) + (1|voice), data = long)
lmer(threat~condition + (1|id) + (condition|voice), data = long)
lmer(threat~condition + (condition|id) + (condition|voice), data = long)
lmer(threat~condition + (1|id) + (condition|voice), data = long)
lmer(threat~condition + (1+ condition|id), data = long)
lmer(threat~cond_race*cond_name + (1|id), data = long)
lmer(threat~cond_race*cond_pitch + (1|id), data = long)
## https://m-clark.github.io/mixed-models-with-R/extensions.html#additional-grouping-structure
## to deal with hierarchical nature of data (since name is nested within condition)
library(lmerTest)
lmer(threat~cond_race*cond_pitch + (1|id), data = long)
lmer(threat~1 + (1|id) + (1|voice), data = long)
lmer(threat~1 + (1|id) + (1|name), data = long)
lmer(threat~1 + (1|id) + (1|voice), data = long)
lmer(threat~condition + (1|id) + (1|voice), data = long)
lmer(threat~cond_pitch*cond_race + (1|id) + (1|voice), data = long)
lmer(threat~cond_pitch*cond_race + (1|id) + (1|voice) +(1|condition/name), data = long)
lmer(threat~cond_pitch*cond_race + (1|id) + (1|voice), data = long)
with(long,table(condition,name,voice, id))
with(long,table(condition,name, id))
with(long,table(condition,voice, id))
with(long,table(condition,name, id))
with(long,table(condition,voice))
with(long,table(condition,name))
lmer(threat~1 + (1|name) + (1|voice), data = long)
with(long,table(condition,name))
lmer(threat~1 + (1|condition/name) + (1|voice), data = long)
lmer(threat~1 + (1|condition/name), data = long)
with(long, table(name, condition)) %>%
image(
col = grey.colors(10, start = 1, end = 0),
axes = FALSE,
xlab = "name",
ylab = "cond"
)
with(long, table(name, condition)) %>%
image(
col = grey.colors(10, start = 1, end = 0),
axes = FALSE,
xlab = "name",
ylab = "cond"
)
lmer(threat~1 + (1|name:condition), data = long)
lmer(threat~condition+ (1|name:condition), data = long)
lmer(threat~1+ (1|name:condition), data = long)
with(long, table(voice, condition)) %>%
image(
col = grey.colors(10, start = 1, end = 0),
axes = FALSE,
xlab = "voice",
ylab = "cond"
)
with(long, table(voice, condition))
with(long, table(name, cond_race)) %>%
image(
col = grey.colors(10, start = 1, end = 0),
axes = FALSE,
xlab = "voice",
ylab = "cond"
)
with(long, table(name, cond_pitch)) %>%
image(
col = grey.colors(10, start = 1, end = 0),
axes = FALSE,
xlab = "voice",
ylab = "cond"
)
lmer(threat~1+ (1|name:cond_race), data = long)
with(long, table(name, cond_race)) %>%
image(
col = grey.colors(10, start = 1, end = 0),
axes = FALSE,
xlab = "voice",
ylab = "cond"
)
with(long, table(name, condition)) %>%
image(
col = grey.colors(10, start = 1, end = 0),
axes = FALSE,
xlab = "voice",
ylab = "cond"
)
mod1 <- lmer(threat ~ condition + (1+ condition|id) + (1|voice), data = long)
with(long, table(name, condition, id, voice)) %>%
image(
col = grey.colors(10, start = 1, end = 0),
axes = FALSE,
)
with(long, table(name, condition, id, voice))
lmer(threat~1+ (1|name:condition), data = long)
mod1 <- lmer(threat ~ condition + (1+ condition|id), data = long)
mod1 <- lmer(threat ~ condition + (1|id), data = long)
summary(mod1)
mod1 <- lmer(threat ~ cond_race*cond_pitch + (1|id), data = long)
summary(mod1)
mod1 <- lmer(threat ~ cond_race*cond_pitch + (condition|id), data = long)
summary(mod1)
with(long, table(condition, id)) %>%
image(
col = grey.colors(10, start = 1, end = 0),
axes = FALSE,
xlab = "voice",
ylab = "cond"
)
with(long, table(voice, name)) %>%
image(
col = grey.colors(10, start = 1, end = 0),
axes = FALSE,
xlab = "voice",
ylab = "cond"
)
mod1 <- lmer(threat ~ cond_race*cond_pitch + (condition|id), data = long)
d = read.csv('http://www.bodowinter.com/tutorial/politeness_data.csv')
mod1 <- lmer(threat ~ condition + (condition|id), data = long)
summary(mod1)
nullmodel2 <- lmer( threat~ condition + voice +(1|id), data = long, REML=FALSE)
nullmodel3 <- lmer( threat ~ condition + voice + (1|id) + (1|voice), data = long, REML=FALSE)
nullmodel2 <- lmer( threat~ cond_race*cond_pitch +(1|id), data = long, REML=FALSE)
nullmodel3 <- lmer( threat ~ cond_race*cond_pitch + (1|id) + (1|voice), data = long, REML=FALSE)
anova (nullmodel2, nullmodel3)
nullmodel2 <- lmer( threat~ cond_race*cond_pitch +(1|id)+(1|voice), data = long, REML=FALSE)
nullmodel3 <- lmer( threat ~ cond_race*cond_pitch +name + (1|id) + (1|voice), data = long, REML=FALSE)
anova (nullmodel2, nullmodel3)
M <- table(long$cond_race, long$name)
M
all(colSums(M > 0L) == 1L)
mod1 <- lmer(threat ~ condition + (condition||id) + (1|voice), data = long)
summary(mod1)
mod1 <- lmer(threat ~ condition + (0 +condition||id) + (1|voice), data = long)
summary(mod1)
mod1 <- lmer(threat ~ condition + (0 +condition||id), data = long)
mod1 <- lmer(threat ~ condition + (0 +condition|id), data = long)
nullmodel3 <- lmer( threat ~ cond_race*cond_pitch +name + (1|id) + (1|voice), data = long, REML=FALSE)
nullmodel3 <- lmer( threat ~ cond_race*cond_pitch +name + (1|id) + (1|voice) + (1|cond_race/name), data = long, REML=FALSE)
nullmodel3 <- lmer( threat ~ cond_race*cond_pitch + (1|id) + (1|voice) + (1|cond_race/name), data = long, REML=FALSE)
?isSingular
nullmodel3
nullmodel3 <- lmer( threat ~ cond_race*cond_pitch +name + (1|id) + (1|voice), data = long, REML=FALSE)
nullmodel3
mod1 <- lmer(threat ~ condition + (1|id) + (condition|voice), data = long)
summary(mod1)
nullmodel3 <- lmer( threat ~ cond_race*cond_pitch +name + (1|id) + (cond_race*cond_pitch||voice), data = long, REML=FALSE)
nullmodel3
nullmodel3 <- lmer( threat ~ cond_race*cond_pitch + (1|id) + (cond_race*cond_pitch||voice), data = long, REML=FALSE)
nullmodel3 <- lmer( threat ~ cond_race*cond_pitch + (1|id) + (cond_race*cond_pitch||voice), data = long)
nullmodel3 <- lmer( threat ~ cond_race*cond_pitch + (1|id) + (cond_race*cond_pitch|voice), data = long, REML = F)
nullmodel3
nullmodel2 <- lmer( threat~ cond_race*cond_pitch +(1|id)+(1|voice), data = long, REML=FALSE)
## error leads to rank-deficiency
nullmodel3 <- lmer( threat ~ cond_race*cond_pitch + (1|id) + (cond_race*cond_pitch|voice), data = long, REML = F)
anova (nullmodel2, nullmodel3)
mod <- lmer(threat ~ condition + (1|id) + (1|voice), data = long)
mod1 <- lmer(threat ~ condition +name +  (1|id) + (1|voice), data = long)
anova(mod, mod1)
mod <- lmer(threat ~ condition + (1|id) + (1|voice), data = long)
mod1 <- lmer(threat ~ condition +name +  (1|id) + (1|voice), data = long)
summary(mod1)
nullmodel2 <- lmer( threat~ cond_race*cond_pitch +(1|id)+(1|voice) + (1|cond_race/name), data = long, REML=FALSE)
nullmodel2
nullmodel2 <- lmer( threat~ cond_race*cond_pitch +(1|id)+(1|voice) + (1|name), data = long, REML=FALSE)
nullmodel2
lmer(threat~1+ (1|name), data = long)
lmer(threat~ (1|name), data = long)
lmer(threat~ 1+(1|condition:name), data = long)
nullmodel3 <- lmer( threat ~ cond_race*cond_pitch + (1|id) + (cond_race*cond_pitch|voice), data = long, REML = F)
nullmodel3 <- lmer( threat ~ cond_race*cond_pitch + (1|id) + (1|voice), data = long, REML = F)
nullmodel3
nullmodel3 <- lmer( threat ~ cond_race*cond_pitch + (1|id) + (1|voice), data = long, REML = F)
nullmodel3 <- lmer( threat ~ cond_race*cond_pitch + (1|id) + (cond_race*cond_pitch|voice), data = long, REML = F)
nullmodel3 <- lmer( threat ~ cond_race*cond_pitch + (1|id) + (cond_race|voice), data = long, REML = F)
mod1 <- lmer(threat ~ condition +name +  (1|id) + (condition|voice), data = long)
mod1 <- lmer(threat ~ condition + (1|id) + (condition|voice), data = long)
nullmodel3 <- lmer(threat ~ cond_race*cond_pitch + (1|id) + (cond_race*cond_pitch|voice), data = long, REML = F)
nullmodel3 <- lmer(threat ~ cond_race*cond_pitch + (1|id) + (cond_pitch|voice), data = long, REML = F)
nullmodel3 <- lmer(threat ~ cond_race*cond_pitch + (1|id) + (cond_race|voice), data = long, REML = F)
nullmodel3 <- lmer(threat ~ cond_race*cond_pitch + (1|id) + (cond_pitch|voice), data = long, REML = F)
nullmodel3 <- lmer(threat ~ cond_race*cond_pitch + (1|id) + (cond_pitch|voice) + (cond_race|voice), data = long, REML = F)
nullmodel3 <- lmer(threat ~ cond_race*cond_pitch + (1|id) + (cond_pitch|voice), data = long, REML = F)
nullmodel3
r_refs("r-references.bib")
james <- c(1, 0,0,0, 1,1)
anne <- c(0,1,0,1,0,1)
dave <- c(0, 1, 1, 1, 0, 1)
c(james, anne, dave)
cbind(james, anne, dave)
m <- cbind(james, anne, dave)
View(m)
jaccard <- function(M, user1, user2) {
sums = rowSums(M[,c(user1, user2)])
similarity = length(sums[sums==2])
total = length(sums[sums==1]) + similarity
similarity/total
}
jaccard(m, james, anne)
jaccard(m, james, dave)
rowSums(m[, c(james, anne)])
View(m)
rowSums(m[, c(james, anne)])
james <- c(1, 0,0,0, 1,1)
anne <- c(0,1,0,1,0,1)
dave <- c(0, 1, 1, 1, 0, 1)
m <- cbind(james, anne, dave)
rowSums(m[, c(james, anne)])
rowSums(m[, c("james", "anne")])
similarity = length(sums[sums == 2])
sums = rowSums(m[, c("james", "anne")])
similarity = length(sums[sums == 2])
total = length(sums[sums ==1]) + similarity
total
similarity
similarity/total
m <- cbind(like, alcMost, closest)
like <- c(1, 0,0,0, 1,1)
alcMost <- c(0,1,0,1,0,1)
closest <- c(0, 1, 1, 1, 0, 1)
m <- cbind(like, alcMost, closest)
m
jaccard <- function(M, user1, user2) {
sums = rowSums(M[,c(user1, user2)])
similarity = length(sums[sums==2])
total = length(sums[sums==1]) + similarity
similarity/total
}
jaccard(m, "like", "alcMost")
jaccard(m, "closest", "alcMost")
.2+.75
(.2+.75)/2
install.packages("jaccard")
library(jaccard)
jaccard(m$like, m$alcMost)
m
jaccard(m[, "like"], m[,"alcMost"])
