# Showing Results with Tables {#TablesChapter}

Graphs and other visual methods, discussed in the next chapter, can
often be more effective ways to present descriptive and inferential
statistics than tables.[^chapter_9_1] Nonetheless, tables of parameter estimates,
descriptive statistics, and so on can sometimes be important tools for
describing your data and presenting research findings. See
@ehrenberg1977 and @gelman2011tables for information on creating
tables for effective communication.

Learning how to dynamically connect statistical results with tables in
your presentation documents aids reproducibility and can ultimately save
you a lot of time. Manually typing results into tables by hand is
tedious, not very reproducible, and can introduce errors.[^chapter_9_2] It's
especially tedious to retype tables to reflect changes you made to your
data and models. Fortunately, you don't actually need to create tables
by hand. There are many ways to have R do the work for you.

The goal of this chapter is for you to learn how to dynamically create
tables for your presentation documents written in LaTeX and Markdown. We
will first learn the simple knitr/R Markdown syntax we need to
dynamically include tables created from R objects. Then we will learn
how to actually create the tables. There are a number of ways to turn R
objects into tables that can be dynamically included in LaTeX or
Markdown/HTML markup. In this chapter we mostly focus on three tools for
creating tables: the `kable()`\index{R function!kable} function from *knitr*, the *xtable*
package, and the *texreg* package [@R-texreg]. `kable()` can create tables
from data frames for both LaTeX and Markdown/HTML documents. *xtable*
does the same, but is much more customizable. *texreg* produces
publication-quality tables from objects containing statistical model
results, or model objects. It allows you to combine results from multiple
models into one table. Unfortunately *texreg* is less flexible with
objects of classes it does not support.[^chapter_9_3]

**Warning:** Automating table creation removes the possibility of adding
errors to the presentation of your analyses by incorrectly copying
output, a big potential problem in hand-created tables. However, it is
not error-free. You could easily create inaccurate tables with coding
errors. So, as always, it is important to 'eyeball' the output. Does it
make sense? If you select a couple values in the R output, do they match
what is in the presentation document's table? If not, you need to go
back to the code and see where things have gone wrong. With that caveat,
let's start making tables.

## Basic *knitr* Syntax for Tables {#ResultsOptions}

The most important *knitr*/*rmarkdown* chunk option for showing tables
is `results`. The `results` option can have one of four
values: \index{knitr option!results}

-   `'hide'`,

-   `'asis'`,

-   `'markup'`,

-   `'hold'`.

The value `hide` clearly hides the results of your code chunk from your
presentation document. `hold` collects all of the output and prints it
at the end of the chunk. To include tables created from R objects in
your LaTeX or Markdown output you should set `results='asis'` or
`results='markup'`. `asis` is the simplest option as it writes the raw
markup form of the table into the presentation document, not as a
highlighted code chunk, but as markup. It is then compiled as table
markup with the rest of the document. `markup` uses an output hook to
mark up the results in a predefined way. In this chapter, we will work
with examples using the `asis` option.

## Table Basics

Before getting into the details of how to create tables from R objects,
it is useful to first learn how generic tables are created in LaTeX and
Markdown/HTML. If you are not familiar with basic LaTeX or Markdown
syntax, you might want to skip ahead to Chapters \@ref(LatexChapter) and
\@ref(MarkdownChapter), respectively, before coming back to learn
about making tables in these languages.

### Tables in LaTeX {#LaTeXTables}

Tables in LaTeX are usually embedded in two environments: the `table`\index{LaTeX!table}
and `tabular`\index{LaTeX!tabular} environments. What is a LaTeX environment in general?

A LaTeX environment is a part of the markup where special commands are\index{LaTeX!environment}
executed. A simple environment is the `center`\index{LaTeX!centre} environment.[^chapter_9_5]
Everything placed in a center environment is, unsurprisingly, centered.
Typing:

````latex
\begin{center}
    This is a center environment.
\end{center}
````

creates the following text in the PDF output:

\begin{center}
    This is a center environment.
\end{center}

LaTeX environments all follow the same general syntax:

````latex
\begin{ENVIRONMENT_NAME}
    ...
    ...
\end{ENVIRONMENT_NAME}
````

You do not have to indent the contents of an environment. Indentations
neither affect how the document is compiled nor show up in the final
PDF.[^chapter_9_6] It is conventional to indent them, however, because it makes
the markup easier to read.

In this chapter we will learn about two types of environments you need
for tables in LaTeX. The `tabular` environment allows you to format the
content of a table. The `table` environment allows you to format a
table's location in the text and its caption.

#### The `tabular` environment {-}

The `tabular`\index{LaTeX!tabular} environment allows you to create tables in LaTeX. Let's
work through the basic syntax for a simple table.[^chapter_9_7]

To begin a simple tabular environment type
`\begin{tabular}{TABLE_SPEC}`. The `TABLE_SPEC` argument allows you to
specify the number of columns in a table and the alignment of text in
each column. For example, to create a table with three columns, the
first of which is left-justified and the latter two center-justified we
type:

````latex
\begin{tabular}{l c c}
````

The `l` argument creates a left-justified column, `c` creates a centered
one. If we wanted a right-justified column we would use `r`.[^chapter_9_8] Finally, we can add a horizontal line between columns by adding a vertical bar
`|` between the column arguments.[^chapter_9_9] For example, to place a vertical
line between the first and second columns in our example table, we would
type:

````latex
\begin{tabular}{l | c c}
````

Now let’s enter content into our table. We saw earlier how CSV files
delimit individual columns with commas. In LaTeX’s `tabular`
environment, columns are delimited with ampersands (`&`).[^chapter_9_10]\index{LaTeX!ampersand} In CSV
tables, new lines are delimited by starting a new line. In LaTeX tables
you use two backslashes (`\\`).[^chapter_9_11] Here is a simple example of the first two lines of a table:

````latex
\begin{tabular}{l | c c}
    Observation & Variable1 & Variable2 \\
    Subject1 & a & b \\
````

It is common to demarcate the row with a table’s column names, the first
row, with horizontal lines. A horizontal line also often visually
demarcates a table’s end. You can add horizontal lines in the `tabular`
environment with the `\hline` command.

````latex
\begin{tabular}{l | c c}
    \hline
    Observation & Variable1 & Variable2 \\
    \hline \hline
    Subject1 & a & b \\
    \hline
````

Finally, we close the `tabular` environment with `\end{tabular}`. The
full code (with a few extra rows added) is:

````latex
\begin{tabular}{l | c c}
    \hline
    Observation & Variable1 & Variable2 \\
    \hline \hline
    Subject1 & a & b \\
    Subject2 & c & d \\
    Subject3 & e & f \\
    Subject4 & g & h \\
    \hline
\end{tabular}
````
This produces the following table:

\begin{tabular}{l | c c}
    \hline
    Observation & Variable1 & Variable2 \\
    \hline \hline
    Subject1 & a & b \\
    Subject2 & c & d \\
    Subject3 & e & f \\
    Subject4 & g & h \\
    \hline
\end{tabular}

#### The `table` float environment {- #POSITIONSPEC}

\index{LaTeX!table}

You might notice that the table we created so far lacks a title and is
bunched very closely to the surrounding text. In LaTeX we can create a
`table` float environment to solve this problem. Float environments
allow us to separate a table from the text, specify its location, and
give it a caption.[^chapter_9_16] To begin a `table` float environment, use
`\begin{table}[POSITION_SPEC]`. The argument allows us to determine the location of the table. It can be set
to `h` for here, i.e. where the table is written in the text. It can
also be `t` to place it on the top of a page or `b` for the bottom of
the page. To set a title for the table, use the `\caption` command.\index{LaTeX!caption} LaTeX
automatically determines the table's number, so you only need to enter
the text. You can also declare a cross-reference key for the table with
the `\label` command.[^chapter_9_17] A `table` environment is closed
with `\end{table}`. Let's see a full example.

````latex
\begin{table}[t]
    \caption{Example Simple LaTeX Table}
    \label{ExLaTeXTable}
    \begin{center}
        \begin{tabular}{l | c c}
            \hline
            Observation & Variable1 & Variable2 \\
            \hline \hline
            Subject1 & a & b \\
            Subject2 & c & d \\
            Subject3 & e & f \\
            Subject4 & g & h \\
            \hline
        \end{tabular}
    \end{center}
\end{table}
````

\begin{table}[t]
    \caption{Example Simple LaTeX Table}
    \label{ExLaTeXTable}
    \begin{center}
        \begin{tabular}{l | c c}
            \hline
            Observation & Variable1 & Variable2 \\
            \hline \hline
            Subject1 & a & b \\
            Subject2 & c & d \\
            Subject3 & e & f \\
            Subject4 & g & h \\
            \hline
        \end{tabular}
    \end{center}
\end{table}

Notice that the `tabular` environment is further nested in the `center`
environment.\index{LaTeX!center} This centers the table, while leaving the table's title
left-justified. The final result is Table \@ref(ExLaTeXTable). One final tip: to have the caption placed at
the bottom rather than the top of the table in the final document,
simply put the `caption` command after the `tabular` environment is
closed.

You can see how typing out a table in LaTeX gets very tedious very fast.
For all but the simplest tables, it is best to try to have R do the
table-making work for you.

### Tables in Markdown/HTML

Now we will briefly look at the syntax for creating simple Markdown and
HTML tables before turning to learn how to have R create these tables
for us.

#### Markdown tables {-}

Markdown table syntax, as with all Markdown syntax, is generally much
simpler than LaTeX's tabular syntax. The markup is much more human
readable. Nonetheless, larger tables can still be tedious to create.

You do not need to declare any new environments to start creating a
Markdown table. Just start typing in the content. Columns are delimited
in Markdown tables with a vertical bar (`|`). Rows are started with a
new line. To indicate the head of the table, usually the row(s)
containing the column names, separate it from the body of the table with
a row of dashes (e.g. `-----`). Here is an example based on the table we
created in the previous section:

````markdown
Observation | Variable1  | Variable2
----------- | ---------- | ---------
Subject1    | a          | b
````

Note that it is not necessary to line up the vertical bars. You just
need to have the same number of them on each row.

You can specify each column's text justification using colons on the
dashed row. For example, this code will create the left-center-center
justified formatted table we made earlier:

````markdown
Observation | Variable1 | Variable2
:---------- | :-------: | :-------:
Subject1    | a         | b
Subject2    | c         | d
Subject3    | e         | f
Subject4    | g         | c
````

To create a left-justified column, use a colon on only the left
side of the dashes.

The ultimate look of a Markdown table is highly dependent on the CSS
style file you are using (see Chapter
\@ref(MarkdownChapter) for how to change your CSS style file). The
default RStudio CSS style as of late 2019 formats our table to look like
this:

![](images/chapter_9/RStudioDefaultTableExample.png)

Using a different CSS style file,[^chapter_9_18] we can get something like this:

![](images/chapter_9/MarkedTableExample.png)

In basic Markdown, you can add a caption with the heading syntax (see
Section \@ref(MarkdownHeader)). In this example the three hashes (`###`)
create the header:

````markdown
### Example Simple Markdown Table
Observation | Variable1 | Variable2
:---------- | :-------: | :-------:
Subject1    | a         | b
````

producing something like this:

![](images/chapter_9/MarkedCaptionTableExample.png)

#### HTML tables {-}

The `texreg()`\index{R function!texreg} function that we will learn in the next section doesn't create tables formatted with Markdown syntax. It can create tables with HTML syntax. This is useful for us because virtually any HTML markup can be incorporated into a Markdown document. In fact, Markdown table syntax
is only a stepping stone for more easily producing tables with HTML
syntax. So it is useful to also understand the basic syntax for HTML
tables.

HTML uses element "tags"\index{HTML!tags} to begin and end tables. The main element we
use to create tables is, well, the `tables` element. This is very
similar to LaTeX's `tabular` environment. An HTML element generally
begins with a start tag and ends with an end tag. This is
similar to LaTeX's `\begin{}` and `\end{}` commands. Begin tags are
encapsulated in a greater than and less than sign and include the
element tag name (`<TAG>`). End tags are similar, but include a forward
slash like this `</TAG>`. The content of the element goes between the
start and end tags. For example:

````html
<table>
    . . .
    . . .
</table>
````

As in LaTeX, you are not required to tab the content of a table element;
however, it does make the markup document easier to read and, as the
number of tags proliferates, easier to write.

You can specify element attributes inside of start tags.[^chapter_9_19] For
example, to add a border to the table, use: `<table border="1">`.[^chapter_9_20]\index{HTML!table border}

Table rows are put inside of `tr` (table rows) element tags. Individual
cells are delimited with `td` (standard cell) tags. Here is what the
first row of our example table looks like in basic HTML:

````html
<table>
  <tr>
    <td>Observation</td> <td>Variable1</td> <td><Variable2/td>
  </tr>
````

We can further delimit a table's header row(s) from its body with the
`thead`\index{HTML!thead} and `tbody`\index{HTML!tbody} tags. Finally, before making a full table it's
useful to mention that table captions can be included with `caption`
tags.\index{HTML!caption} Let's put this all together:

````html
<table>
  <thead>
    <tr>
      <td>Observation</td> <td>Variable1</td> <td>Variable2</td>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Subject1</td> <td>a</td> <td>b</td>
    </tr>
    <tr>
      <td>Subject2</td> <td>c</td> <td>d</td>
    </tr>
    <tr>
      <td>Subject3</td> <td>e</td> <td>e</td>
    </tr>
    <tr>
      <td>Subject4</td> <td>f</td> <td>f</td>
    </tr>
  </tbody>
</table>
````

As with Markdown tables, the ultimate appearance of the table is highly
dependent on the style files you use.

## Creating Tables from Supported Class R Objects

Just as the `write.csv()`\index{R function!write.csv} function turns an R data frame into a CSV formatted text file, there are a number of methods in R to take an
object, e.g. a matrix, data frame, the output from a statistical
analysis, and so on, and turn them into LaTeX and HTML tables. `kable()`,
*xtable*, and *texreg* each work most easily with specific object
classes that their designers explicitly supported.

### `kable` for Markdown and LaTeX

\index{R function!kable|(}

`kable()` easily converts matrices and data frames into tables for
Markdown, HTML, and LaTeX among others. Let's create a simple data
frame:

```{r Ch9kable_df}
library(knitr)

kable_ex <- data.frame(
            Observation = c("Subject1", "Subject2",
                            "Subject3", "Subject4"),
            Variable1 = c("a", "c", "e", "g"),
            Variable2 = c("b", "d", "f", "c")
)
```

Then place this data frame into a `kable()` call:

```{r Ch9kableBasic, eval=FALSE}
kable(kable_ex, caption = "Example kable Table")
```

Beyond setting the table's caption with `caption`, there are a few other
alterations that can be made with `kable` arguments. You can specify new
column and row names by passing character vectors to `col.names` and
`row.names`, respectively. These are very useful, as it can be difficult,
or at least irritating, for your readers to try to decode the names you
give to your data frame rows and columns in R. Another useful argument
is `digits`. This will round numbers in the table to a specified number
of digits after the decimal place. To effectively convey your results,
you should *at least* only include digits that are significant in
that they meaningfully vary in the data [@ehrenberg1977 281].

You can also change the markup language that the table is created in
using the `format` argument. For example, to create a LaTeX formatted
table, use `format = 'latex'`. In general, you do not need to specify the
format if you are using *knitr* or *rmarkdown* to include the table in a
presentation document. This will be done automatically.

\index{R function!kable|)}

### *xtable* for LaTeX and HTML

\index{R function!xtable|(}

While `kable()` allows you to quickly create simple tables, it can only do
so from matrices and data frames. It also has limited customizability.
The *xtable* package can create more customizable tables from a wider
variety of R objects, including statistical model objects.

Different R statistical model estimation commands can produce model
objects of different classes. For example, the `lm()`\index{R function!lm} (linear model) function creates model summaries of the `lm` class. Let's create a simple linear regression using the *swiss* data frame and `lm()`. This
data frame is included with R by default. The simple linear regression
model we are going to make has the *swiss* variable **Examination** as
the dependent variable and **Education** as the only independent
variable.[^chapter_9_21]

```{r Ch9SimpleSwissRegression}
# Fit simple linear regression model
M1 <- lm(Examination ~ Education, data = swiss)

# Return class
class(M1)
```

By using the `class` function, we can see that *M1* is of the `lm` class.
*M1* contains items estimated by the linear regression model[^chapter_9_22] such
as the coefficient estimates and their standard errors. To get a summary
of a model object's contents, use the `summary()`\index{R function!summary} function like this:

```{r Ch9SimpleSwissSummary}
summary(M1)
```

To find a full list of object classes that *xtable* supports, type
`methods(xtable)`\index{R function!methods} into the R Console after you have loaded the package.

#### *xtable* for LaTeX {-}

Let's look at how to create LaTeX tables with *xtable* by creating a
table summarizing the estimates from the *M1* model object.

````latex
<<results=asis, echo=FALSE>>=
library(xtable)

# Create LaTeX table from M1 and show the output markup
xtable(M1,
       caption = "Linear Regression, DV: Exam Score",
       label = "BasicXtableSummary",
       digits = 1)
@
````

When included in an R Sweave-style LaTeX document, this code will create
a table exactly like Table \@ref(BasicXtableSummary).

Let's go through this code, working from the outside in. First you'll
notice that we've set two *knitr* code chunk options. As we discussed
earlier, `results='asis'`\index{knitr option!results} allows us to include the LaTeX formatted table
created by *xtable*. The next option `echo=FALSE`\index{knitr option!echo} hides the code from being shown in our final document. The `xtable()` function creates the
summary table of our *M1* model object. Not only does it produce both
complete `tabular` and `table` environments,\index{LaTeX!tabular}\index{LaTeX!table} but also through the
`caption` and `label` arguments it automatically adds in the table's
title and cross-reference label, respectively. Finally, notice that I
added the `digits = 1` argument. As in `kable()`, this specifies that I
want numbers in the table to be rounded to one decimal digit.

```{r Ch9xtableSummaryPrint, results='asis', echo=FALSE, message=FALSE}
library(xtable)
options(xtable.comment = FALSE)

# Create LaTeX table from M1 and show the output markup
xtable(M1,
       caption = "Linear Regression, DV: Exam Score",
       label = "BasicXtableSummary",
       digits = 1)
```

The caption is printed below the table by default.

#### *xtable* for Markdown/HTML {-}

We can use *xtable* and the `print.xtable()` function[^chapter_9_23] to also create tables for Markdown and HTML documents. The *xtable* function produces,
unsurprisingly, `xtable()` class objects. We can run these through the
`print()`\index{R function!print} function and add arguments to customize how the table is
formatted. By default, `print.xtable()`'s\index{R function!print.xtable} `type` argument is set to
`"latex"`. To create an HTML table that can be inserted into Markdown
and HTML documents, set the `type` argument from `"latex"` to `"html"`.
For example, to create an HTML version of the table summarizing *M1* and
include it in an R Markdown document, type:

````r
`r ''````{r results='asis', echo=FALSE}
library(xtable)

# Create an xtable object from M1
m1_table <- xtable(M1,
                caption = "Linear Regression, DV: Exam Score",
                label = "BasicXtableSummary",
                digits = 1)

# Create HTML summary table of m1_table
print.xtable(m1_table, type = "html", caption.placement = "top")
```